import streamlit as st
from PIL import Image, ImageDraw
import numpy as np
from skimage import morphology
from skimage.feature import hessian_matrix, hessian_matrix_eigvals
import os
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import pandas as pd
import plotly.express as px
import seaborn as sns
import nibabel as nib
import scipy.ndimage as nd
import scipy.stats as stats
from skimage.filters import frangi, hessian,threshold_local
from skimage import measure
from skimage import filters, morphology,exposure
from skimage.color import rgb2gray
from scipy.stats import entropy, pearsonr,skew
from skimage.measure import shannon_entropy
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from joblib import dump, load



radi_file_path = "/Users/mac/Desktop/ÏùòÎ£åÏòÅÏÉÅÏ≤òÎ¶¨/ÌîÑÎ°úÏ†ùÌä∏/radiologist_memo.txt" #Î©îÎ™®Ïû• Ï†ÄÏû• path
clini_memo_path = '/Users/mac/Desktop/ÏùòÎ£åÏòÅÏÉÅÏ≤òÎ¶¨/ÌîÑÎ°úÏ†ùÌä∏/clini_memo.txt'#Î©îÎ™®Ïû• Ï†ÄÏû• path ÏÑ§Ï†ïÌïòÍ∏∞ 
image_file_path = "/Users/mac/Desktop/ÏùòÎ£åÏòÅÏÉÅÏ≤òÎ¶¨/ÌîÑÎ°úÏ†ùÌä∏/patient_img.jpg" #ÌôòÏûê Ïù¥ÎØ∏ÏßÄ Ï†ÄÏû• Path
 




st.set_page_config(page_title="Three-way", page_icon="üßëüèª‚Äç‚öïÔ∏èüôçüèª‚Äç‚ôÇÔ∏è", layout="wide")

menu_selection = st.sidebar.selectbox("Î©îÎâ¥ ÏÑ†ÌÉù", ["HOME", "For Radiologist", "For Clinician","For Patient"])


def draw_on_image(image_pil, output_path,coordinates):
    image_pil = image_pil.convert("RGB") ##Ïó¨Í∏∞Ï∂îÍ∞Ä
    # Ïù¥ÎØ∏ÏßÄÏóê Í∑∏Î¶º Í∑∏Î¶¨Í∏∞
    draw = ImageDraw.Draw(image_pil)
    draw.rectangle(coordinates, outline="red", width=2)
    image_pil.save(output_path)

def add_grid(image,grid_size): ##Ïó¨Í∏∞ Ìï®Ïàò Ï∂îÍ∞Ä
    image = image.convert("RGB") ##Ïó¨Í∏∞Ï∂îÍ∞Ä
    # Í≤©Ïûê ÌëúÏãúÎ•º ÏúÑÌïú Matplotlib ÏÑ§Ï†ï
    fig, ax = plt.subplots()
    ax.imshow(image)

    # Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ Í∞ÄÏ†∏Ïò§Í∏∞
    image_width, image_height = image.size

    # Í≤©Ïûê ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
    grid_width = image_width // grid_size
    grid_height = image_height // grid_size

    # Í≤©Ïûê Í∑∏Î¶¨Í∏∞
    for i in range(1, grid_size):
        ax.axvline(i * grid_width, color='w', linestyle='--', linewidth=1,alpha=0.3)
        ax.axhline(i * grid_height, color='w', linestyle='--', linewidth=1,alpha=0.3)

    # XÏ∂ï ÎùºÎ≤® ÌëúÏãú
    for i in range(0, image_width, grid_width):
        ax.text(i, -5, str(i), color='blue', fontsize=7, ha='center', va='center')

    # YÏ∂ï ÎùºÎ≤® ÌëúÏãú
    for i in range(0, image_height, grid_height):
        ax.text(-5, i, str(i), color='blue', fontsize=7, ha='center', va='center')

    # Matplotlib ÌîåÎ°ØÏùÑ StreamlitÏóê ÌëúÏãú
    st.pyplot(fig)



def radi_memo_page():
    st.title("ÏÜåÍ≤¨ÏÑú")

    # ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌÖçÏä§Ìä∏ ÏûÖÎ†• Î∞õÍ∏∞
    user_input = st.text_area("ÏÜåÍ≤¨ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:", height=200)
    clicked = st.button("Ï†ÄÏû•")
    # Ï†ÄÏû• Î≤ÑÌäº
    if clicked:
        radi_save_memo(user_input)
        st.success("Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")
    



# Î©îÎ™®Î•º ÌååÏùºÏóê Ï†ÄÏû•ÌïòÎäî Ìï®Ïàò
def radi_save_memo(memo_text):
    with open(radi_file_path, "w", encoding="utf-8") as file:
        file.write(memo_text)


# ÌååÏùºÏóêÏÑú Î©îÎ™®Î•º Î∂àÎü¨Ïò§Îäî Ìï®Ïàò
def radi_load_memo():
    try:
        with open(radi_file_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        return "Ï†ÄÏû•Îêú Î©îÎ™®Í∞Ä ÏóÜÏäµÎãàÎã§."


def clini_memo_page():
    st.title("ÏÜåÍ≤¨ÏÑú")

    # ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÌÖçÏä§Ìä∏ ÏûÖÎ†• Î∞õÍ∏∞
    clini_input = st.text_area("ÏÜåÍ≤¨ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:"""," ", height=200)
    clicked = st.button("Ï†ÄÏû•")
    # Ï†ÄÏû• Î≤ÑÌäº
    if clicked:
        clini_save_memo(clini_input)
        st.success("Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")



# Î©îÎ™®Î•º ÌååÏùºÏóê Ï†ÄÏû•ÌïòÎäî Ìï®Ïàò
def clini_save_memo(memo_text):
    with open(clini_memo_path, "w", encoding="utf-8") as file:
        file.write(memo_text)


# ÌååÏùºÏóêÏÑú Î©îÎ™®Î•º Î∂àÎü¨Ïò§Îäî Ìï®Ïàò
def clini_load_memo():
    try:
        with open(clini_memo_path, "r", encoding="utf-8") as file:
            return file.read()
    except FileNotFoundError:
        return "Ï†ÄÏû•Îêú Î©îÎ™®Í∞Ä ÏóÜÏäµÎãàÎã§."


def save_image(image):
    image.save(image_file_path)


def image_preprocessing(image_path,type=str):
    
    # gray scaleÎ°ú open 
    # ÎÖºÎ¨∏Ïóê Î≥¥Î©¥ gray scaleÎ°ú openÌïòÎäî Í≤å Ï¢ãÎã§Í≥† Ìï®
    # Î¨∏Ï†úÎäî Ïï†Ï¥àÏóê 2DÎùºÎäî Í±∞ÏûÑ, gray...
    # ÌòπÏãú Î™∞ÎùºÏÑú ÏùºÎã® ÎÑ£Ïñ¥ÎÜìÏùå..

    f = Image.open(image_path).convert('L')
    
    #image => numpy : Ïó¨Îü¨ Ïó∞ÏÇ∞ ÌïòÎ†§Í≥†
    f = np.array(f)


    ## equalized -> morphology.closing => median filter Ï†ÅÏö©
    equalized_image = exposure.equalize_adapthist(f)
    closing_image = morphology.closing(equalized_image,np.ones((3,3))) #check
    median_filtered_image = filters.median(equalized_image,np.ones((3,3))) #check

    vessel_enhanced = tophat(median_filtered_image)
    hessian_image = hessian(vessel_enhanced) # check 

    binary_image = vessel_enhanced > threshold_local(median_filtered_image, 81, offset=.05)
    if type == 'binary':
        return binary_image
    elif type == 'image':
        return vessel_enhanced


def left_right_volume(image,type):
    #ÏÇ¨ÎûåÎßàÎã§ breast ÏúÑÏπòÍ∞Ä Îã§Î•º Ïàò ÏûàÍ∏∞ ÎïåÎ¨∏Ïóê zÎ•º ÎßåÎì§Ïñ¥ ÎÜìÏïòÏùå
    # Ïù¥ÌõÑ Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ ÌõÑ Í≤∞Ï†ïÌï† Í≤É 
    z = image.shape[1] * 5 //8
    z2 = image.shape[1]//2

    d = image.shape[0]//2

    right_chest_binary = image[:d,:z2]
    left_chest_binary = image[:d,-z2:]

    left_chest_volume = np.sum(left_chest_binary == 1)
    right_chest_volume = np.sum(right_chest_binary == 1)


    # typeÏóê Îî∞Îùº binary maskÎ•º Î∞òÌôòÌï†ÏßÄ, volumeÏùÑ Î∞òÌôòÌï†ÏßÄ Í≤∞Ï†ï
    if type == 'binary':
        return left_chest_binary
    elif type == 'volume':
        return left_chest_volume, right_chest_volume


def feature_extraction(image_path):
    path = image_path
    binary_image = image_preprocessing(image_path=path,type='binary')
    enhanced_image = image_preprocessing(image_path=path,type='image')
    #crop
    crop_mask = left_right_volume(image=binary_image,type='binary')
    right, left= left_right_volume(binary_image,type = 'volume')
    crop_volume = left

    #crop image
    crop_image = image_crop(enhanced_image)

    #feature
    sd_value = np.std(binary_image)
    entropy_value = entropy(binary_image.flatten())
    shannon_entropy_value = shannon_entropy(binary_image.flatten())
    mean_squared_error = np.mean((binary_image - np.mean(binary_image))**2)
    mean_value = np.mean(binary_image)
    skew_value = skew(crop_image.flatten())
    binary_skew_value = skew(crop_mask.flatten())

    return crop_volume, entropy_value, sd_value, mean_value, skew_value, binary_skew_value



def image_crop(image):
    z = image.shape[1]//2
    d = image.shape[0]//2

    right_chest_image = image[:d,:z]
    left_chest_image = image[:d,-z:]

    return left_chest_image


def tophat(image):
    selem = morphology.disk(20)
    vessel_enhanced = morphology.white_tophat(image, selem)
    return vessel_enhanced


def vessel(image):
    hxx, hxy, hyy = hessian_matrix(image, sigma=3)
    _, i2 = hessian_matrix_eigvals([hxx, hxy, hyy])
    return i2



# HOME ÌéòÏù¥ÏßÄ
if menu_selection == "HOME":
    st.title("Three-way medical service")
    st.write("*Three-way medical serviceÏóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§.*")
    st.write("\n")
    st.info(
        '''
        Three-way medical serviceÏùÄ ÏùòÏÇ¨Î∂ÑÎì§Íªò ÏßÑÎã®Ïóê ÌïÑÏöîÌïú Í∏∞Îä•ÏùÑ Ï†úÍ≥µÌï¥ ÎìúÎ¶¨Í≥†, \n
        ÌôòÏûêÎ∂ÑÎì§ÍªòÎäî ÏßàÌôòÏóê ÎåÄÌïú Ï†ïÎ≥¥ÏôÄ ÏßÑÎã® Í≤∞Í≥ºÎ•º Ï†úÍ≥µÌïòÏó¨ ÏùòÏÇ¨ÏôÄ ÌôòÏûêÍ∞ÑÏùò communicationÏùÑ Ï¶ùÏßÑÏãúÌÇ§Í∏∞ ÏúÑÌïú ÏÑúÎπÑÏä§ÏûÖÎãàÎã§.\n
        Îçî ÎÇòÏùÄ ÏÑúÎπÑÏä§Î•º Ï†úÍ≥µÌïòÍ∏∞ ÏúÑÌï¥ ÏµúÏÑ†ÏùÑ Îã§ÌïòÍ≤†ÏäµÎãàÎã§.
        '''
    )


if menu_selection == "For Radiologist":
    st.title("[ Radiologist page ]")
    uploaded_file = st.file_uploader("ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî.", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        image_pil = Image.open(uploaded_file)
        image_np = np.array(image_pil)
        save_image(image_pil)
        check=0

        # Ïù¥ÎØ∏ÏßÄ Ï≤òÎ¶¨
        image_tophat = tophat(image_np.copy())
        image_vessel = vessel(image_np.copy())
        image_vessel_normalized = (image_vessel - np.min(image_vessel)) / (np.max(image_vessel) - np.min(image_vessel))
        image_vessel_normalized = np.clip(image_vessel_normalized, 0.0, 1.0)


        st.write("## ‚ñπ Patient Image")
        # Ïù¥ÎØ∏ÏßÄ Ïó¥ÏùÑ ÎßåÎì≠ÎãàÎã§.
        col1,col2,col3 = st.columns(3)
        col1.image(image_np, use_column_width=True)
        col2.image(image_tophat, use_column_width=True)
        col3.image(image_vessel_normalized, use_column_width=True)
        st.write("\n")

        st.write("## ‚ñπ Quantitative Evaluation")
        col4,col5 = st.columns(2)
        #predict Î∞è Í∑∏ÎûòÌîÑ plot
        image_path = image_file_path
        f = Image.open(image_path).convert('L')
        f = np.array(f)
        equalized_image = exposure.equalize_adapthist(f)
        closing_image = morphology.closing(equalized_image,np.ones((3,3))) #check
        median_filtered_image = filters.median(equalized_image,np.ones((3,3))) #check

        vessel_enhanced = tophat(median_filtered_image)
        visualze_hessian = vessel(vessel_enhanced) # check 

        binary_image = vessel_enhanced > threshold_local(median_filtered_image, 81, offset=.05)

        result = feature_extraction(image_path)
        crop_volume, entropy_value, sd_value, mean_value, skew_value, binary_skew_value = result
        recur_0 = pd.read_csv('/Users/mac/Desktop/·Ñã·Ö¥·ÑÖ·Ö≠·Ñã·Öß·Üº·Ñâ·Ö°·Üº·Ñé·Ö•·ÑÖ·Öµ/·Ñë·Ö≥·ÑÖ·Ö©·Ñå·Ö¶·Ü®·Ñê·Ö≥/recur_0.csv') #ÏùÄÏïÑ Ïñ∏ÎãàÍ∞Ä Ï§Ä csv ÌååÏùº path
        recur_1 = pd.read_csv('/Users/mac/Desktop/·Ñã·Ö¥·ÑÖ·Ö≠·Ñã·Öß·Üº·Ñâ·Ö°·Üº·Ñé·Ö•·ÑÖ·Öµ/·Ñë·Ö≥·ÑÖ·Ö©·Ñå·Ö¶·Ü®·Ñê·Ö≥/recur_1.csv')
        recur_0['recur'] = 0
        recur_1['recur'] = 1
        df_combined = pd.concat([recur_0,recur_1],ignore_index=True)
        #print(df_combined.head())
        df_combined.to_csv('/Users/mac/Desktop/·Ñã·Ö¥·ÑÖ·Ö≠·Ñã·Öß·Üº·Ñâ·Ö°·Üº·Ñé·Ö•·ÑÖ·Öµ/·Ñë·Ö≥·ÑÖ·Ö©·Ñå·Ö¶·Ü®·Ñê·Ö≥/concat_file.csv',index=False)   #concat ÎßåÎì§Ïñ¥ÏÑú Ï†ÄÏû•Ìï† path               

        df = pd.read_csv('/Users/mac/Desktop/·Ñã·Ö¥·ÑÖ·Ö≠·Ñã·Öß·Üº·Ñâ·Ö°·Üº·Ñé·Ö•·ÑÖ·Öµ/·Ñë·Ö≥·ÑÖ·Ö©·Ñå·Ö¶·Ü®·Ñê·Ö≥/concat_file.csv') # Ï†ÄÏû•Îêú concat ÌååÏùº Î∂àÎü¨Ïò§Îäî path ÏúÑÏôÄ ÎèôÏùº
        feature = df.drop('recur',axis=1)
        feature = feature.drop('number',axis=1)
        labels = df['recur']
        #feature 

        X_train, X_test,y_train,y_test = train_test_split(feature,labels,test_size=0.2,random_state=42)
        model = RandomForestClassifier(random_state=42)
        model.fit(X_train,y_train)
        dump(model,'random_forest_model.joblib')
        load_model = load('random_forest_model.joblib')

        selected_features = ['volume', 'entropy', 'sd', 'mean', 'skew_value', 'binary_skew_value']

        # ÏûÑÏùòÏùò ploint
        sample_data_point = {
            'volume': crop_volume,
            'entropy': entropy_value,
            'sd': sd_value,
            'mean': mean_value,
            'skew_value': skew_value,
            'binary_skew_value': binary_skew_value
        }
        fig, axs = plt.subplots(len(selected_features), 2, figsize=(10, 2*len(selected_features)))
        #predict Í∞í
        new_data = pd.DataFrame(sample_data_point, index=[0])



        for i, feature in enumerate(selected_features):
            # recur_0 feature Î∂ÑÌè¨
            axs[i, 0].hist(recur_0[feature], bins=20, alpha=0.5, color='blue', label='Recur 0')
            axs[i, 0].axvline(x=sample_data_point[feature], color='red', linestyle='dashed', linewidth=2, label='Sample Point')
            axs[i, 0].set_title(f'Distribution of {feature} for Recur 0')
            axs[i, 0].legend()

            # recur_1 feature Î∂ÑÌè¨
            axs[i, 1].hist(recur_1[feature], bins=20, alpha=0.5, color='orange', label='Recur 1')
            axs[i, 1].axvline(x=sample_data_point[feature], color='red', linestyle='dashed', linewidth=2, label='Sample Point')
            axs[i, 1].set_title(f'Distribution of {feature} for Recur 1')
            axs[i, 1].legend()
        plt.tight_layout()

        image_file_path = "/Users/mac/Desktop/·Ñã·Ö¥·ÑÖ·Ö≠·Ñã·Öß·Üº·Ñâ·Ö°·Üº·Ñé·Ö•·ÑÖ·Öµ/·Ñë·Ö≥·ÑÖ·Ö©·Ñå·Ö¶·Ü®·Ñê·Ö≥/plot_image.png" #ÌîåÎûèÌïú Ìï®Ïàò Ï†ÄÏû•Ìï† path
        plt.savefig(image_file_path)
        col4.image(image_file_path,use_column_width=True)

        new_prediction = model.predict(new_data)
        new_probabilities = model.predict_proba(new_data)
        with col5:
            st.markdown("## ‚óΩÔ∏è AI Ïû¨Î∞ú ÏòàÏ∏° Í≤∞Í≥º")
            st.info(f'Predicted Class: {new_prediction[0]}')
            st.text(f'\t- Probability of Class 0: {new_probabilities[0][0]*100:.2f}%')
            st.text(f'- Probability of Class 1: {new_probabilities[0][1]*100:.2f}%')
        
        predicted_class = new_prediction[0]
        probabilities = [new_probabilities[0][0]*100, new_probabilities[0][1]*100]
        # SessionStateÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏÉÅÌÉú Ï†ÄÏû•
        if '1st_page_state' not in st.session_state:
            st.session_state['1st_page_state'] = {'predicted_class': predicted_class, 'probabilities': probabilities}


        st.write("\n")
        st.write("## ‚ñπ ROI")
        col4,col5 = st.columns(2)
        height, width = image_vessel_normalized.shape

        grid_size = st.slider("Í≤©Ïûê ÌÅ¨Í∏∞ ÏÑ†ÌÉù", min_value=1, max_value=50, value=10) ##Ïó¨Í∏∞ Ï∂îÍ∞Ä
        image_to = Image.fromarray(image_tophat)
        
        col6,col7 = st.columns(2)
        with col6:
            add_grid(image_to, grid_size) ##Ïó¨Í∏∞ Ï∂îÍ∞Ä

        with col7:
            check=0
            # ÏÇ¨Ïö©ÏûêÎ°úÎ∂ÄÌÑ∞ Í∑∏Î¶¥ ÏòÅÏó≠Ïùò Ï¢åÌëúÎ•º ÏûÖÎ†• Î∞õÍ∏∞
            start_x = st.number_input('ÏãúÏûë X Ï¢åÌëú', 0, width, 0)
            end_x = st.number_input('ÎÅù X Ï¢åÌëú', 0, width, width)
            start_y = st.number_input('ÏãúÏûë Y Ï¢åÌëú', 0, height, 0)
            end_y = st.number_input('ÎÅù Y Ï¢åÌëú', 0, height, height)

            # Í∑∏Î¶¥ ÏòÅÏó≠ Ï¢åÌëúÎ°ú tuple ÏÉùÏÑ±
            coordinates = (start_x, start_y, end_x, end_y)

            if st.button('ROI Ï∂îÏ∂ú'):
                output_path = "/Users/mac/Desktop/ÏùòÎ£åÏòÅÏÉÅÏ≤òÎ¶¨/ÌîÑÎ°úÏ†ùÌä∏/drawn_image.jpg"  # ROI Ïù¥ÎØ∏ÏßÄ Ïª¥Ìì®ÌÑ∞ path Ï†ÄÏû• path
                draw_on_image(image_to.copy(), output_path, coordinates)
                check=1

         
        st.write('\n')
        st.markdown("---")
        st.write('\n')
        col8,col9 = st.columns(2)
        if check == 1:
            image_draw = Image.open(output_path)
            col8.image(image_draw, use_column_width=True)

        with col9:
            radi_memo_page()


if menu_selection == "For Clinician":
    st.title("[ Clinician page ]")
    st.write("## ‚ñπ Patient Image ")
    

    image_np = "/Users/mac/Desktop/ÏùòÎ£åÏòÅÏÉÅÏ≤òÎ¶¨/ÌîÑÎ°úÏ†ùÌä∏/patient_img.jpg" #Ï†ÄÏû•Îêú ÌôòÏûê Ïù¥ÎØ∏ÏßÄ Í∞ÄÏ†∏Ïò§Îäî path Îß® ÏúÑÏóê image_file_pathÏóê Ï†ÄÏû•Ìï¥ ÎÖº pathÏôÄ ÎèôÏùº
    image_pil = Image.open(image_np)
    image_np_array = np.array(image_pil)

    image_pil = Image.open(image_np)
    image_np_array = np.array(image_pil)

    image_tophat = tophat(image_np_array.copy())
    image_vessel = vessel(image_np_array.copy())
    image_vessel_normalized = (image_vessel - np.min(image_vessel)) / (np.max(image_vessel) - np.min(image_vessel))
    image_vessel_normalized = np.clip(image_vessel_normalized, 0.0, 1.0)

    col1, col2, col3 = st.columns(3)
    col1.image(image_pil, use_column_width=True)
    col2.image(image_tophat, use_column_width=True)
    col3.image(image_vessel_normalized, use_column_width=True)
    st.write('\n')


    st.write("## ‚ñπ Quantitative Evaluation")
    col4,col5 = st.columns(2)

    col4.image('/Users/mac/Desktop/·Ñã·Ö¥·ÑÖ·Ö≠·Ñã·Öß·Üº·Ñâ·Ö°·Üº·Ñé·Ö•·ÑÖ·Öµ/·Ñë·Ö≥·ÑÖ·Ö©·Ñå·Ö¶·Ü®·Ñê·Ö≥/plot_image.png',use_column_width=True) #plotÌïú image path Í∞ÄÏ†∏Ïò§Í∏∞
    with col5:
        # 1ÌéòÏù¥ÏßÄÏóêÏÑú Ï†ÄÏû•Ìïú ÏÉÅÌÉú Î∂àÎü¨Ïò§Í∏∞
        if '1st_page_state' in st.session_state:
            state = st.session_state['1st_page_state']
            predicted_class = state['predicted_class']
            probabilities = state['probabilities']

        st.markdown("## ‚óΩÔ∏è AI Ïû¨Î∞ú ÏòàÏ∏° Í≤∞Í≥º")
        st.info(f'Predicted Class: {predicted_class}')
        st.text(f'\t- Probability of Class 0: {probabilities[0]:.2f}%')
        st.text(f'- Probability of Class 1: {probabilities[1]:.2f}%')



    st.write('\n')
    st.write("## ‚ñπ Radiologist ÏÜåÍ≤¨")
    coll1,coll2 = st.columns(2)

    with coll1:
        image_pil = Image.open('/Users/mac/Desktop/ÏùòÎ£åÏòÅÏÉÅÏ≤òÎ¶¨/ÌîÑÎ°úÏ†ùÌä∏/drawn_image.jpg')# Ïó¨Í∏∞Î°ú bounding box Ïù¥ÎØ∏ÏßÄ Îì§Ïñ¥ÏôÄÏïºÌï®
        st.image(image_pil, caption="Patient Image", use_column_width=True)

    with coll2:
        if st.button("ÏÜåÍ≤¨ Î∂àÎü¨Ïò§Í∏∞"):
            loaded_memo = radi_load_memo()
            st.text("Radiologist ÏÜåÍ≤¨:")
            st.info(loaded_memo)


    st.write('\n')
    st.markdown("---")
    st.write('\n')
    clini_memo_page()



if menu_selection == "For Patient":
    st.title("[ ÏßÑÎã®ÏÑú ]")
    st.write("# ‚ñπ Ïú†Î∞©ÏïîÏóê ÎåÄÌï¥")

    st.write(

       ''' **1. Ïú†Î∞©ÏïîÏù¥ÎûÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?**

        Ïú†Î∞©ÏïîÏùÄ Ïú†Î∞© ÏÑ∏Ìè¨ÏóêÏÑú ÏãúÏûëÎêú Ïïî Ï¢ÖÏñëÏúºÎ°ú, Ï°∞Í∏∞ Î∞úÍ≤¨ Ïãú ÏπòÎ£å Í∞ÄÎä•Ìïú ÏßàÎ≥ëÏûÖÎãàÎã§. ''')


    st.write(
         ''' **2. Ï†ïÍ∏∞Ï†ÅÏù∏ Í±¥Í∞ï Í≤ÄÏßÑÏù¥ Ï§ëÏöîÌïú Ïù¥Ïú†**

        Ï°∞Í∏∞ Î∞úÍ≤¨ÏùÄ ÏπòÎ£å ÏÑ±Í≥µÏùò ÌïµÏã¨ÏûÖÎãàÎã§. Ï†ïÍ∏∞Ï†ÅÏù∏ Ïú†Î∞© Í≤ÄÏßÑÏùÑ ÌÜµÌï¥ Îπ†Î•∏ ÏãúÏùº ÎÇ¥Ïóê Î¨∏Ï†úÎ•º Î∞úÍ≤¨Ìï† Ïàò ÏûàÏäµÎãàÎã§.''')

    st.write(
        '''  **3. Í±¥Í∞ïÌïú ÏÉùÌôú ÏäµÍ¥ÄÏùò Ï§ëÏöîÏÑ±**

        Í∑úÏπôÏ†ÅÏù∏ Ïö¥Îèô, Í±¥Í∞ïÌïú ÏãùÎã®, Ïä§Ìä∏Î†àÏä§ Í¥ÄÎ¶¨Îäî Ïú†Î∞© Í±¥Í∞ïÏùÑ ÏßÄÌÇ§Îäî Îç∞ ÎèÑÏõÄÏù¥ Îê† Ïàò ÏûàÏäµÎãàÎã§.''')

    st.write(

     '''  **4. ÏùòÎ£å Ï†ÑÎ¨∏Í∞ÄÏôÄ ÏÉÅÎã¥**

        Ïñ¥Îñ†Ìïú ÏùòÎ¨∏Ïù¥ÎÇò Í±±Ï†ïÏÇ¨Ìï≠Ïù¥ ÏûàÏùÑ Í≤ΩÏö∞ ÏùòÎ£å Ï†ÑÎ¨∏Í∞ÄÏôÄ ÏÉÅÎã¥ÌïòÎäî Í≤ÉÏù¥ Ï§ëÏöîÌï©ÎãàÎã§. Ï†ÑÎ¨∏Í∞ÄÏùò ÎèÑÏõÄÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî!''')

    st.write(

    '''   **5. Ïú†Ïö©Ìïú ÏûêÏõê**

        - [ÌïúÍµ≠ Ïú†Î∞©Ïïî ÌòëÌöå](https://www.kbca.info/)
        - [Íµ≠Î¶ΩÏïîÏÑºÌÑ∞ Ïïî Ï†ïÎ≥¥ ÏÑúÎπÑÏä§](https://www.cancer.go.kr/)

        ÌôòÏûê ÌéòÏù¥ÏßÄÎäî Ïó¨Îü¨Î∂ÑÏùò Í±¥Í∞ïÏùÑ ÏßÄÌÇ§Í∏∞ ÏúÑÌïú Ï†ïÎ≥¥ÏôÄ ÏßÄÏõêÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§. Ïñ∏Ï†úÎì†ÏßÄ ÏùòÎ£å Ï†ÑÎ¨∏Í∞ÄÏôÄ ÏÉÅÎã¥ÌïòÏó¨ Í±¥Í∞ïÏùÑ Ï±ôÍ∏∞ÏÑ∏Ïöî!''')
    

    st.write('\n')
    st.write("## ‚ñπ Quantitative Evaluation")
    col4,col5 = st.columns(2)

    col4.image('/Users/mac/Desktop/·Ñã·Ö¥·ÑÖ·Ö≠·Ñã·Öß·Üº·Ñâ·Ö°·Üº·Ñé·Ö•·ÑÖ·Öµ/·Ñë·Ö≥·ÑÖ·Ö©·Ñå·Ö¶·Ü®·Ñê·Ö≥/plot_image.png',use_column_width=True) #ÌîåÎûè Ïù¥ÎØ∏ÏßÄ
    with col5:
        # 1ÌéòÏù¥ÏßÄÏóêÏÑú Ï†ÄÏû•Ìïú ÏÉÅÌÉú Î∂àÎü¨Ïò§Í∏∞
        if '1st_page_state' in st.session_state:
            state = st.session_state['1st_page_state']
            predicted_class = state['predicted_class']
            probabilities = state['probabilities']


        st.markdown("## ‚óΩÔ∏è AI Ïû¨Î∞ú ÏòàÏ∏° Í≤∞Í≥º")
        st.info(f'Predicted Class: {predicted_class}')
        st.text(f'\t- Probability of Class 0: {probabilities[0]:.2f}%')
        st.text(f'- Probability of Class 1: {probabilities[1]:.2f}%')



    st.write('\n')
    st.markdown("---")
    st.write('\n')
    col1,col2 = st.columns(2)

    with col1:
        image_pil = Image.open('/Users/mac/Desktop/ÏùòÎ£åÏòÅÏÉÅÏ≤òÎ¶¨/ÌîÑÎ°úÏ†ùÌä∏/drawn_image.jpg')# Ïó¨Í∏∞Î°ú bounding box Ïù¥ÎØ∏ÏßÄ Îì§Ïñ¥ÏôÄÏïºÌï®
        st.image(image_pil, caption="Patient Image", use_column_width=True)
               
    with col2:
        loaded_memo = radi_load_memo()
        st.text("Radiologist ÏÜåÍ≤¨ ÏÜåÍ≤¨:")
        st.info(loaded_memo)    

        st.write("\n")

        loaded_memo = clini_load_memo()
        st.text("Clinician ÏÜåÍ≤¨ ÏÜåÍ≤¨:")
        st.info(loaded_memo)  
    